#!/bin/bash

###################################################
###Bash script for developmental series analysis###
###################################################


printf " ################################################ \n \
############Concatenating reads now############# \n \
################################################ \n"

for i in reads/*R1.fastq.gz; do zcat $i; echo; done > all_reads_R1.fastq &
for f in reads/*R2.fastq.gz; do zcat $f; echo; done > all_reads_R2.fastq 

wait

printf " ################################################ \n \
#############Subsampling reads now############## \n \
################################################ \n"

seqtk sample -s100 all_reads_R1.fastq 40000000 > subsamp.R1.fastq &
seqtk sample -s100 all_reads_R2.fastq 40000000 > subsamp.R2.fastq

wait

printf " ################################################ \n \
############### Initiating ORP ################# \n \
################################################ \n"

## probably need to edit the number of threads and overall memory...

/home/summersk/programs/Oyster_River_Protocol/oyster35.mk main \
MEM=750 \
CPU=28 \
READ1=subsamp.R1.fastq \
READ2=subsamp.R2.fastq \
RUNOUT=subsamp

# The transcriptome is in a different file, so I'll take the 'good' transcripts and move that fasta
cp /home/summersk/Developmental_series/orthofuse/subsamp/merged/merged/good.merged.fasta .

# Rename all the transcripts, largely for aesthetics...
awk '/^>/{print ">Transcript_" ++i; next}{print}' good.merged.fasta > subsamp.imitator.merged.fasta

# verify the 'good' transcripts isn't a bad idea
python /home/summersk/programs/busco/scripts/run_BUSCO.py -i subsamp.imitator.merged.fasta -m transcriptome --cpu 24 -l /home/summersk/busco_dbs/eukaryota_odb9 -o good_busco


printf " ################################################ \n \
######### Trim and clean other reads ########### \n \
################################################ \n"

# Remove adaptors and trim the reads from each sample, first get the samples
samples=$(ls reads/*fastq.gz | sed "s/.R1.fastq//g" | sed "s/.R2.fastq//g")

# Run trimmomatic
cd reads
(ls *fastq.gz | sed "s/.R1.fastq.gz//g" | sed "s/.R2.fastq.gz//g") | \
parallel -j 10 trimmomatic-0.36.jar PE -threads 4 \
-baseout /home/summersk/Developmental_series/rcorr/{}.TRIM.fastq.gz {}.R1.fastq.gz {}.R2.fastq.gz \
LEADING:3 TRAILING:3 ILLUMINACLIP:barcodes.fa:2:30:10 MINLEN:25 

# R corrector  | sed "s/rcorr\//g"
cd ..
(ls rcorr/*P.fastq.gz | sed "s/.TRIM_1P.fastq.gz//g" | sed "s/.TRIM_2P.fastq.gz//g"  | uniq | grep -v subsamp) | \
parallel -j 6 run_rcorrector.pl -t 4 -k 31 -1 {}.TRIM_1P.fastq.gz -2 {}.TRIM_2P.fastq.gz -od rcorr

printf " ################################################ \n \
######## Pseduo-quantify with Kallisto ######### \n \
################################################ \n"

# Make directories for each sample:
cd rcorr/
samples=$(ls *P.cor.fq.gz | sed "s/.TRIM_1P.cor.fq.gz//g" | sed "s/.TRIM_2P.cor.fq.gz//g" | uniq)
cd ..
mkdir kallisto_quants
cd kallisto_quants
for i in $samples; do mkdir $i; done
cd ..

# Pseudo-quantification with kallisto, build the index first
kallisto index -i subsamp_devseries.idx subsamp.imitator.merged.fasta

# Perform the actual pseudo-quantification

parallel -j 10 kallisto quant -i subsamp_devseries.idx -o kallisto_quants/{} -b 100 \
rcorr/{}.TRIM_1P.cor.fq.gz rcorr/{}.TRIM_2P.cor.fq.gz ::: $samples

printf " ################################################ \n \
######## Diamond annotation to Xenopus ######### \n \
################################################ \n"

#### Annotation with diamond to amphibian (xenopus, nanorana, rana peptides) + UniRef90 databases

# cat all peptides together (, makedb in diamond
cat GCA_002284835.2_RCv2.1_protein.faa Nanorana_parkeri.gene.v2.pep orthodb.fasta uniref90.fasta Xenopus_tropicalis.JGI_4.2.pep.all.fa > all_peptides.fa

# Make the diamond index  
diamond makedb --in all_peptides.fa -d allpep

# Diamond mapping
diamond blastx -d /home/summersk/peptide_databases/allpep.dmnd -q subsamp.imitator.merged.fasta -o subimi2allpep.m8 --threads 16

# sort by top hit
sort subimi2allpep.m8 -k 1,1 -k11,11rg | sort -u -k 1,1 --merge > subimiallpep_tophit.txt

## This approach yields 50.7% annotation rate

# I will also annotate just to xenopus, in case that makes a difference for pulling out gene names
diamond blastx -d /home/summersk/peptide_databases/xen.dmnd -q subsamp.imitator.merged.fasta -o subimi2xen.m8 --threads 16

# sort by top hit
sort subimi2xen.m8 -k 1,1 -k11,11rg | sort -u -k 1,1 --merge > subimixen_tophit.txt

# Now, download all of this on to my computer using cyberduck like a pleb.
	# This includes the kallisto quantifications as well as the annotation output file from diamond


printf " ################################################ \n \
########### You did it! Great work! ############ \n \
################################################ \n"
